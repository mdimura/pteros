/*
 * This file is a part of
 *
 * ============================================
 * ###   Pteros molecular modeling library  ###
 * ============================================
 *
 * https://github.com/yesint/pteros
 *
 * (C) 2009-2020, Semen Yesylevskyy
 *
 * All works, which use Pteros, should cite the following papers:
 *  
 *  1.  Semen O. Yesylevskyy, "Pteros 2.0: Evolution of the fast parallel
 *      molecular analysis library for C++ and python",
 *      Journal of Computational Chemistry, 2015, 36(19), 1480–1488.
 *      doi: 10.1002/jcc.23943.
 *
 *  2.  Semen O. Yesylevskyy, "Pteros: Fast and easy to use open-source C++
 *      library for molecular analysis",
 *      Journal of Computational Chemistry, 2012, 33(19), 1632–1636.
 *      doi: 10.1002/jcc.22989.
 *
 * This is free software distributed under Artistic License:
 * http://www.opensource.org/licenses/artistic-license-2.0.php
 *
*/



#include "pteros/core/grid.h"
#include "pteros/core/pteros_error.h"

using namespace std;
using namespace pteros;
using namespace Eigen;

// Get left and right shifts from the current cell in given dim
// Accounts for left edge, middle and right edge
void Grid::get_shifts_for_dim(int dim, vector<Vector2i>& shifts){
    int N = extents[dim];
    shifts.reize(3);

    // Special case of N=1, no neighbors at all
    if(N==1){
        shifts[0] << 0,0;
        shifts[1] << 0,0;
        shifts[2] << 0,0;
        return;
    }

    // Special case of N=2.
    if(N==2){
        shifts[0] << 0,1;
        shifts[1] << 0,0;
        shifts[2] << 0,0;
        return;
    }

    // General case
    if(periodic_dims[dim]){
        shifts[0] <<  0,N-1;
        shifts[1] << -1,1;
        shifts[2] << -(N-1),0;
    } else {
        shifts[0] <<  0,1;
        shifts[1] << -1,1;
        shifts[2] << -1,0;
    }
}

Grid::Grid(Vector3i_const_ref ext, bool abs_index, Vector3i_const_ref pbc_dims){
    create(ext,abs_index,pbc_dims);
}

void Grid::create(Vector3i_const_ref ext, bool abs_index, Vector3i_const_ref pbc_dims)
{
    resize(ext);
    periodic_dims = pbc_dims;

    //----------------------------
    // Generate neighbour lists
    //----------------------------
    vector< vector<Vector2i> > shifts(3);
    for(int dim=0;dim<3;++dim) get_shifts_for_dim(dim,shifts[dim]);

    // We use cube 3x3x3 which corresponds to
    // 27 possible nb lists
    for(int x=0;x<3;++x){
        const Vector2i& xs = shifts[0][x];
        for(int y=0;y<3;++y){
            const Vector2i& ys = shifts[1][y];
            for(int z=0;z<3;++z){
                const Vector2i& zs = shifts[2][z];
                int ind = 9*x + 3*y + z;

                Vector3i cell;
                for(int i=0;i<2;++i)
                    for(int j=0;j<2;++j)
                        for(int k=0;k<2;++k){
                            // If all coordinates are 0 then skip
                            if( (cell!=0).any() ) nb_lists[ind].emplace_back(xs[i],ys[j],zs[k]);
                        }
            }
        }
    } // cube

    // Assign nb indexes
    for(int i=0;i<data.shape()[0];++i)
        for(int j=0;j<data.shape()[1];++j)
            for(int k=0;k<data.shape()[2];++k){
                data[i][j][k].nb_index = get_nb_list_index(Vector3i(i,j,k));
        }
}

// Find correct nb list for given cell position
int Grid::get_nb_list_index(Vector3i_const_ref pos){
    Vector3i ind;
    for(int dim=0;dim<3;++dim){
        if(pos(dim)==0)
            ind(dim)=0;
        else if(pos(dim)==sz(dim)-1)
            ind(dim)=2;
        else
            ind(dim)=1;
    }

    //return nb_lists[9*ind(0) + 3*ind(1) + ind(2)];
    return 9*ind(0) + 3*ind(1) + ind(2);
}


void Grid::clear()
{    
    int i,j,k;
    for(i=0;i<data.shape()[0];++i)
        for(j=0;j<data.shape()[1];++j)
            for(k=0;k<data.shape()[2];++k){
                data[i][j][k].clear();
        }    
}


void Grid::resize(Vector3i_const_ref extents)
{
    data.resize( boost::extents[extents(0)][extents(1)][extents(2)] );
    clear();
}

void Grid::populate(const Selection &sel, bool abs_index)
{
    Vector3f min,max;
    sel.minmax(min,max);
    populate(sel,min,max,abs_index);
}

void Grid::populate(const Selection &sel, Vector3f_const_ref min, Vector3f_const_ref max, bool abs_index)
{
    int Natoms = sel.size();
    int NX = data.shape()[0];
    int NY = data.shape()[1];
    int NZ = data.shape()[2];
    int n1,n2,n3;

    // Non-periodic variant    
    for(int i=0;i<Natoms;++i){
        // Get coordinates of atom
        auto coor = sel.xyz(i);

        n1 = floor(NX*((*coor)(0)-min(0))/(max(0)-min(0)));
        if(n1<0 || n1>=NX) continue;

        n2 = floor(NY*((*coor)(1)-min(1))/(max(1)-min(1)));
        if(n2<0 || n2>=NY) continue;

        n3 = floor(NZ*((*coor)(2)-min(2))/(max(2)-min(2)));
        if(n3<0 || n3>=NZ) continue;

        if(abs_index){
            cell(n1,n2,n3).add_point(sel.index(i),*coor);
        } else {
            cell(n1,n2,n3).add_point(i,*coor);
        }
    }
}

void Grid::populate_periodic(const Selection &sel, Vector3i_const_ref pbc_dims, bool abs_index)
{
    populate_periodic(sel, sel.box(), pbc_dims, abs_index);
}

void Grid::populate_periodic(const Selection &sel, const Periodic_box &box, Vector3i_const_ref pbc_dims, bool abs_index)
{
    if( pbc_dims(0)==0 && pbc_dims(1)==0 && pbc_dims(2)==0 )
        throw Pteros_error("No periodic dimensions specified for periodic grid!");

    int Natoms = sel.size();
    int NX = data.shape()[0];
    int NY = data.shape()[1];
    int NZ = data.shape()[2];
    int n1,n2,n3;

    // Periodic variant
    Vector3f coor;    
    Matrix3f m_inv = box.get_inv_matrix();

    for(int i=0;i<Natoms;++i){
        coor = sel.xyz(i);
        // See if atom i is in box and wrap if needed
        if( !box.in_box(coor) ){
            box.wrap_point(coor,pbc_dims);
        }

        // Now we are sure that coor is wrapped
        // Get relative coordinates in box [0:1)
        Vector3f coor_rel = m_inv*coor;
        n1 = floor(NX*coor_rel(0));
        n2 = floor(NY*coor_rel(1));
        n3 = floor(NZ*coor_rel(2));

        // For non-periodic dims skip points outside the box
        // if coor(i) is 1.000001 or -0.00001 due to numerucal errors correct manually

        if(!pbc_dims(0) && (n1>=NX || n1<0)) continue;
        if(n1>=NX)
            n1=NX-1;
        else if(n1<0)
            n1=0;

        if(!pbc_dims(1) && (n2>=NY || n2<0)) continue;
        if(n2>=NY)
            n2=NY-1;
        else if(n2<0)
            n2=0;

        if(!pbc_dims(2) && (n3>=NZ || n3<0)) continue;
        if(n3>=NZ)
            n3=NZ-1;
        else if(n3<0)
            n3=0;

        // Assign to grid
        if(abs_index){
            cell(n1,n2,n3).add_point(sel.index(i),coor);
        } else {
            cell(n1,n2,n3).add_point(i,coor);
        }
    }
}
<<<<<<< Updated upstream



void Grid_cell::add_point(int ind, Vector3f_const_ref crd){
    indexes.push_back(ind);
    coords.push_back(crd);
}

void Grid_cell::clear(){
    indexes.clear();
    coords.clear();
}
=======
>>>>>>> Stashed changes
